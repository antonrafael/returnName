<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GraphQL.Client</name>
    </assembly>
    <members>
        <member name="P:GraphQL.Client.Http.GraphQLHttpClient.JsonSerializer">
            <summary>
            the json serializer
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpClient.HttpClient">
            <summary>
            the instance of <see cref="P:GraphQL.Client.Http.GraphQLHttpClient.HttpClient"/> which is used internally
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpClient.Options">
            <summary>
            The Options	to be used
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpClient.WebSocketReceiveErrors">
            <summary>
            Publishes all exceptions which occur inside the websocket receive stream (i.e. for logging purposes)
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpClient.WebsocketConnectionState">
            <summary>
            the websocket connection state
            </summary>
        </member>
        <member name="M:GraphQL.Client.Http.GraphQLHttpClient.SendQueryAsync``1(GraphQL.GraphQLRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Client.Http.GraphQLHttpClient.SendMutationAsync``1(GraphQL.GraphQLRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Client.Http.GraphQLHttpClient.CreateSubscriptionStream``1(GraphQL.GraphQLRequest)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Client.Http.GraphQLHttpClient.CreateSubscriptionStream``1(GraphQL.GraphQLRequest,System.Action{System.Exception})">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Client.Http.GraphQLHttpClient.InitializeWebsocketConnection">
            <summary>
            explicitly opens the websocket connection. Will be closed again on disposing the last subscription
            </summary>
            <returns></returns>
        </member>
        <member name="M:GraphQL.Client.Http.GraphQLHttpClient.Dispose">
            <summary>
            Releases unmanaged resources
            </summary>
        </member>
        <member name="M:GraphQL.Client.Http.GraphQLHttpClientExtensions.CreateSubscriptionStream``1(GraphQL.Client.Abstractions.IGraphQLClient,GraphQL.GraphQLRequest,System.Action{System.Net.WebSockets.WebSocketException})">
            <summary>
            Creates a subscription to a GraphQL server. The connection is not established until the first actual subscription is made.<br/>
            All subscriptions made to this stream share the same hot observable.<br/>
            All <see cref="T:System.Net.WebSockets.WebSocketException"/>s are passed to the <paramref name="webSocketExceptionHandler"/> to be handled externally.<br/>
            If the <paramref name="webSocketExceptionHandler"/> completes normally, the subscription is recreated with a new connection attempt.<br/>
            Other <see cref="T:System.Exception"/>s or any exception thrown by <paramref name="webSocketExceptionHandler"/> will cause the sequence to fail.
            </summary>
            <param name="client">the GraphQL client</param>
            <param name="request">the GraphQL request for this subscription</param>
            <param name="webSocketExceptionHandler">an external handler for all <see cref="T:System.Net.WebSockets.WebSocketException"/>s occurring within the sequence</param>
            <returns>an observable stream for the specified subscription</returns>
        </member>
        <member name="M:GraphQL.Client.Http.GraphQLHttpClientExtensions.CreateSubscriptionStream``1(GraphQL.Client.Abstractions.IGraphQLClient,GraphQL.GraphQLRequest,System.Func{``0},System.Action{System.Net.WebSockets.WebSocketException})">
            <inheritdoc cref="M:GraphQL.Client.Http.GraphQLHttpClientExtensions.CreateSubscriptionStream``1(GraphQL.Client.Abstractions.IGraphQLClient,GraphQL.GraphQLRequest,System.Action{System.Net.WebSockets.WebSocketException})"/>
        </member>
        <member name="M:GraphQL.Client.Http.GraphQLHttpClientExtensions.CreateSubscriptionStream``1(GraphQL.Client.Abstractions.IGraphQLClient,GraphQL.GraphQLRequest,System.Func{``0})">
            <inheritdoc cref="M:GraphQL.Client.Http.GraphQLHttpClient.CreateSubscriptionStream``1(GraphQL.GraphQLRequest)"/>
        </member>
        <member name="T:GraphQL.Client.Http.GraphQLHttpClientOptions">
            <summary>
            The Options that the <see cref="T:GraphQL.Client.Http.GraphQLHttpClient"/> will use
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpClientOptions.EndPoint">
            <summary>
            The GraphQL EndPoint to be used
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpClientOptions.WebSocketEndPoint">
            <summary>
            The GraphQL EndPoint to be used for websocket connections
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpClientOptions.HttpMessageHandler">
            <summary>
            The <see cref="T:System.Net.Http.HttpMessageHandler"/> that is going to be used
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpClientOptions.MediaType">
            <summary>
            The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> that will be send on POST
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpClientOptions.BackOffStrategy">
            <summary>
            The back-off strategy for automatic websocket/subscription reconnects. Calculates the delay before the next connection attempt is made.<br/>
            default formula: min(n, 5) * 1,5 * random(0.0, 1.0)
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpClientOptions.UseWebSocketForQueriesAndMutations">
            <summary>
            If <see langword="true"/>, the websocket connection is also used for regular queries and mutations
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpClientOptions.PreprocessRequest">
            <summary>
            Request preprocessing function. Can be used i.e. to inject authorization info into a GraphQL request payload.
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpClientOptions.OnWebsocketConnected">
            <summary>
            This callback is called after successfully establishing a websocket connection but before any regular request is made. 
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpClientOptions.ConfigureWebsocketOptions">
            <summary>
            Configure additional websocket options (i.e. headers). This will not be invoked on Windows 7 when targeting .NET Framework 4.x. 
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpClientOptions.ConfigureWebSocketConnectionInitPayload">
            <summary>
            Sets the `ConnectionParams` object sent with the GQL_CONNECTION_INIT message on establishing a GraphQL websocket connection.
            See https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md#gql_connection_init.
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpRequest.PreprocessHttpRequestMessage">
            <summary>
            Allows to preprocess a <see cref="T:System.Net.Http.HttpRequestMessage"/> before it is sent, i.e. add custom headers
            </summary>
        </member>
        <member name="M:GraphQL.Client.Http.GraphQLHttpRequest.ToHttpRequestMessage(GraphQL.Client.Http.GraphQLHttpClientOptions,GraphQL.Client.Abstractions.IGraphQLJsonSerializer)">
            <summary>
            Creates a <see cref="T:System.Net.Http.HttpRequestMessage"/> from this <see cref="T:GraphQL.Client.Http.GraphQLHttpRequest"/>.
            Used by <see cref="T:GraphQL.Client.Http.GraphQLHttpClient"/> to convert GraphQL requests when sending them as regular HTTP requests.
            </summary>
            <param name="options">the <see cref="T:GraphQL.Client.Http.GraphQLHttpClientOptions"/> passed from <see cref="T:GraphQL.Client.Http.GraphQLHttpClient"/></param>
            <param name="serializer">the <see cref="T:GraphQL.Client.Abstractions.IGraphQLJsonSerializer"/> passed from <see cref="T:GraphQL.Client.Http.GraphQLHttpClient"/></param>
            <returns></returns>
        </member>
        <member name="T:GraphQL.Client.Http.GraphQLHttpRequestException">
            <summary>
            An exception thrown on unexpected <see cref="T:System.Net.Http.HttpResponseMessage"/>
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpRequestException.StatusCode">
            <summary>
            The returned status code
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpRequestException.ResponseHeaders">
            <summary>
            the returned response headers
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.GraphQLHttpRequestException.Content">
            <summary>
            the returned content
            </summary>
        </member>
        <member name="M:GraphQL.Client.Http.GraphQLHttpRequestException.#ctor(System.Net.HttpStatusCode,System.Net.Http.Headers.HttpResponseHeaders,System.String)">
            <summary>
            Creates a new instance of <see cref="T:GraphQL.Client.Http.GraphQLHttpRequestException"/>
            </summary>
            <param name="statusCode"></param>
            <param name="responseHeaders"></param>
            <param name="content"></param>
        </member>
        <member name="M:GraphQL.Client.Http.GraphQLResponseExtensions.AsGraphQLHttpResponse``1(GraphQL.GraphQLResponse{``0})">
            <summary>
            Casts <paramref name="response"/> to <see cref="T:GraphQL.Client.Http.GraphQLHttpResponse`1"/>. Throws if the cast fails.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="response"></param>
            <exception cref="T:System.InvalidCastException"><paramref name="response"/> is not a <see cref="T:GraphQL.Client.Http.GraphQLHttpResponse`1"/></exception>
            <returns></returns>
        </member>
        <member name="M:GraphQL.Client.Http.UriExtensions.HasWebSocketScheme(System.Uri)">
            <summary>
            Returns true if <see cref="P:System.Uri.Scheme"/> equals "wss" or "ws"
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:GraphQL.Client.Http.UriExtensions.GetWebSocketUri(System.Uri)">
            <summary>
            Infers the websocket uri from <paramref name="uri"/>.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="P:GraphQL.Client.Http.Websocket.GraphQLHttpWebSocket.WebSocketState">
            <summary>
            The current websocket state
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.Websocket.GraphQLHttpWebSocket.ReceiveErrors">
            <summary>
            Publishes all errors which occur within the receive pipeline
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.Websocket.GraphQLHttpWebSocket.ConnectionState">
            <summary>
            Publishes the connection state of the <see cref="T:GraphQL.Client.Http.Websocket.GraphQLHttpWebSocket"/>
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.Websocket.GraphQLHttpWebSocket.IncomingMessageStream">
            <summary>
            Publishes all messages which are received on the websocket
            </summary>
        </member>
        <member name="M:GraphQL.Client.Http.Websocket.GraphQLHttpWebSocket.CreateSubscriptionStream``1(GraphQL.GraphQLRequest,System.Action{System.Exception})">
            <summary>
            Create a new subscription stream
            </summary>
            <typeparam name="TResponse">the response type</typeparam>
            <param name="request">the <see cref="T:GraphQL.GraphQLRequest"/> to start the subscription</param>
            <param name="exceptionHandler">Optional: exception handler for handling exceptions within the receive pipeline</param>
            <returns>a <see cref="T:System.IObservable`1"/> which represents the subscription</returns>
        </member>
        <member name="M:GraphQL.Client.Http.Websocket.GraphQLHttpWebSocket.SendRequest``1(GraphQL.GraphQLRequest,System.Threading.CancellationToken)">
            <summary>
            Send a regular GraphQL request (query, mutation) via websocket
            </summary>
            <typeparam name="TResponse">the response type</typeparam>
            <param name="request">the <see cref="T:GraphQL.GraphQLRequest"/> to send</param>
            <param name="cancellationToken">the token to cancel the request</param>
            <returns></returns>
        </member>
        <member name="M:GraphQL.Client.Http.Websocket.GraphQLHttpWebSocket.BackOff">
            <summary>
            delay the next connection attempt using <see cref="P:GraphQL.Client.Http.GraphQLHttpClientOptions.BackOffStrategy"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:GraphQL.Client.Http.Websocket.GraphQLHttpWebSocket.GetReceiveTask">
            <summary>
            wrapper method to pick up the existing request task if already running
            </summary>
            <returns></returns>
        </member>
        <member name="M:GraphQL.Client.Http.Websocket.GraphQLHttpWebSocket.ReceiveWebsocketMessagesAsync">
            <summary>
            read a single message from the websocket
            </summary>
            <returns></returns>
        </member>
        <member name="M:GraphQL.Client.Http.Websocket.GraphQLHttpWebSocket.Complete">
            <summary>
            Cancels the current operation, closes the websocket connection and disposes of internal resources.
            </summary>
        </member>
        <member name="P:GraphQL.Client.Http.Websocket.GraphQLHttpWebSocket.Completion">
            <summary>
            Task to await the completion (a.k.a. disposal) of this websocket.
            </summary>
            Async disposal as recommended by Stephen Cleary (https://blog.stephencleary.com/2013/03/async-oop-6-disposal.html)
        </member>
    </members>
</doc>
