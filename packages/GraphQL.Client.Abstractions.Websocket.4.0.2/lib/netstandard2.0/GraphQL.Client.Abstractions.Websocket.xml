<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GraphQL.Client.Abstractions.Websocket</name>
    </assembly>
    <members>
        <member name="F:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketMessageType.GQL_CONNECTION_INIT">
            <summary>
                Client sends this message after plain websocket connection to start the communication with the server
                The server will response only with GQL_CONNECTION_ACK + GQL_CONNECTION_KEEP_ALIVE(if used) or GQL_CONNECTION_ERROR
                to this message.
                payload: Object : optional parameters that the client specifies in connectionParams
            </summary>
        </member>
        <member name="F:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketMessageType.GQL_CONNECTION_ACK">
            <summary>
                The server may responses with this message to the GQL_CONNECTION_INIT from client, indicates the server accepted
                the connection.
            </summary>
        </member>
        <member name="F:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketMessageType.GQL_CONNECTION_ERROR">
            <summary>
                The server may responses with this message to the GQL_CONNECTION_INIT from client, indicates the server rejected
                the connection.
                It server also respond with this message in case of a parsing errors of the message (which does not disconnect the
                client, just ignore the message).
                payload: Object: the server side error
            </summary>
        </member>
        <member name="F:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketMessageType.GQL_CONNECTION_KEEP_ALIVE">
            <summary>
                Server message that should be sent right after each GQL_CONNECTION_ACK processed and then periodically to keep the
                client connection alive.
                The client starts to consider the keep alive message only upon the first received keep alive message from the
                server.
                <remarks>
                    NOTE: This one here don't follow the standard due to connection optimization
                </remarks>
            </summary>
        </member>
        <member name="F:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketMessageType.GQL_CONNECTION_TERMINATE">
            <summary>
                Client sends this message to terminate the connection.
            </summary>
        </member>
        <member name="F:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketMessageType.GQL_START">
            <summary>
                Client sends this message to execute GraphQL operation
                id: string : The id of the GraphQL operation to start
                payload: Object:
                query: string : GraphQL operation as string or parsed GraphQL document node
                variables?: Object : Object with GraphQL variables
                operationName?: string : GraphQL operation name
            </summary>
        </member>
        <member name="F:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketMessageType.GQL_DATA">
            <summary>
                The server sends this message to transfer the GraphQL execution result from the server to the client, this message
                is a response for GQL_START message.
                For each GraphQL operation send with GQL_START, the server will respond with at least one GQL_DATA message.
                id: string : ID of the operation that was successfully set up
                payload: Object :
                data: any: Execution result
                errors?: Error[] : Array of resolvers errors
            </summary>
        </member>
        <member name="F:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketMessageType.GQL_ERROR">
            <summary>
                Server sends this message upon a failing operation, before the GraphQL execution, usually due to GraphQL validation
                errors (resolver errors are part of GQL_DATA message, and will be added as errors array)
                payload: Error : payload with the error attributed to the operation failing on the server
                id: string : operation ID of the operation that failed on the server
            </summary>
        </member>
        <member name="F:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketMessageType.GQL_COMPLETE">
            <summary>
                Server sends this message to indicate that a GraphQL operation is done, and no more data will arrive for the
                specific operation.
                id: string : operation ID of the operation that completed
            </summary>
        </member>
        <member name="F:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketMessageType.GQL_STOP">
            <summary>
                Client sends this message in order to stop a running GraphQL operation execution (for example: unsubscribe)
                id: string : operation id
            </summary>
        </member>
        <member name="T:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest">
            <summary>
            A Subscription Request
            </summary>
        </member>
        <member name="P:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest.Id">
            <summary>
            The Identifier of the request
            </summary>
        </member>
        <member name="P:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest.Type">
            <summary>
            The Type of the Request
            </summary>
        </member>
        <member name="P:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest.Payload">
            <summary>
            The payload of the websocket request
            </summary>
        </member>
        <member name="M:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest.SendTask">
            <summary>
            Task used to await the actual send operation and to convey potential exceptions
            </summary>
            <returns></returns>
        </member>
        <member name="M:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest.SendCompleted">
            <summary>
            gets called when the send operation for this request has completed successfully
            </summary>
        </member>
        <member name="M:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest.SendFailed(System.Exception)">
            <summary>
            gets called when an exception occurs during the send operation
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest.SendCanceled">
            <summary>
            gets called when the GraphQLHttpWebSocket has been disposed before the send operation for this request has started
            </summary>
        </member>
        <member name="M:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest.Equals(GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest.op_Equality(GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest,GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest.op_Inequality(GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest,GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketRequest)">
            <inheritdoc />
        </member>
        <member name="T:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketResponse">
            <summary>
            A Subscription Response
            </summary>
        </member>
        <member name="P:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketResponse.Id">
            <summary>
            The Identifier of the Response
            </summary>
        </member>
        <member name="P:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketResponse.Type">
            <summary>
            The Type of the Response
            </summary>
        </member>
        <member name="M:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketResponse.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketResponse.Equals(GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketResponse)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketResponse.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketResponse.op_Equality(GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketResponse,GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketResponse)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketResponse.op_Inequality(GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketResponse,GraphQL.Client.Abstractions.Websocket.GraphQLWebSocketResponse)">
            <inheritdoc />
        </member>
        <member name="T:GraphQL.Client.Abstractions.Websocket.IGraphQLWebsocketJsonSerializer">
            <summary>
            The json serializer interface for the graphql-dotnet http client.
            Implementations should provide a parameterless constructor for convenient usage
            </summary>
        </member>
    </members>
</doc>
